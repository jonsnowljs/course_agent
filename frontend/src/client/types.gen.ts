// This file is auto-generated by @hey-api/openapi-ts

export type Body_converter_convert_multiple_files = {
    files: Array<((Blob | File))>;
};

export type Body_converter_convert_single_file = {
    file: (Blob | File);
};

export type Body_documents_upload_document = {
    file: (Blob | File);
};

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type Body_text_merger_merge_text_files = {
    files: Array<((Blob | File))>;
};

export type ChatMessage = {
    message: string;
    context_limit?: number;
    stream?: boolean;
};

export type DocumentUploadResponse = {
    document_id: string;
    filename: string;
    chunks_count: number;
    total_words: number;
    message: string;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ItemCreate = {
    title: string;
    description?: (string | null);
};

export type ItemPublic = {
    title: string;
    description?: (string | null);
    id: string;
    owner_id: string;
};

export type ItemsPublic = {
    data: Array<ItemPublic>;
    count: number;
};

export type ItemUpdate = {
    title?: (string | null);
    description?: (string | null);
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type SearchRequest = {
    query: string;
    limit?: number;
};

export type SearchResult = {
    id: string;
    score: number;
    filename: string;
    chunk_text: string;
    document_id: string;
    chunk_index: number;
    created_at: string;
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserDocument = {
    document_id: string;
    filename: string;
    created_at: string;
    chunks_count: number;
    total_words: number;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type ChatChatMessageData = {
    requestBody: ChatMessage;
};

export type ChatChatMessageResponse = (unknown);

export type ChatChatHealthResponse = (unknown);

export type ConverterConvertSingleFileData = {
    formData: Body_converter_convert_single_file;
};

export type ConverterConvertSingleFileResponse = (unknown);

export type ConverterConvertMultipleFilesData = {
    formData: Body_converter_convert_multiple_files;
};

export type ConverterConvertMultipleFilesResponse = (unknown);

export type DocumentsUploadDocumentData = {
    formData: Body_documents_upload_document;
};

export type DocumentsUploadDocumentResponse = (DocumentUploadResponse);

export type DocumentsSearchUserDocumentsData = {
    requestBody: SearchRequest;
};

export type DocumentsSearchUserDocumentsResponse = (Array<SearchResult>);

export type DocumentsListUserDocumentsData = {
    /**
     * Maximum number of documents to return
     */
    limit?: number;
};

export type DocumentsListUserDocumentsResponse = (Array<UserDocument>);

export type DocumentsDeleteUserDocumentData = {
    documentId: string;
};

export type DocumentsDeleteUserDocumentResponse = ({
    [key: string]: (string);
});

export type DocumentsGetUserDocumentStatsResponse = ({
    [key: string]: unknown;
});

export type ItemsReadItemsData = {
    limit?: number;
    skip?: number;
};

export type ItemsReadItemsResponse = (ItemsPublic);

export type ItemsCreateItemData = {
    requestBody: ItemCreate;
};

export type ItemsCreateItemResponse = (ItemPublic);

export type ItemsReadItemData = {
    id: string;
};

export type ItemsReadItemResponse = (ItemPublic);

export type ItemsUpdateItemData = {
    id: string;
    requestBody: ItemUpdate;
};

export type ItemsUpdateItemResponse = (ItemPublic);

export type ItemsDeleteItemData = {
    id: string;
};

export type ItemsDeleteItemResponse = (Message);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type TextMergerMergeTextFilesData = {
    formData: Body_text_merger_merge_text_files;
};

export type TextMergerMergeTextFilesResponse = (string);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);

export type UtilsQdrantHealthCheckResponse = (boolean);

export interface NotionSyncResponse {
  synced_pages: number;
  details: string[];
}

export interface NotionIntegrationStatusResponse {
  connected: boolean;
}

export interface NotionIntegrationDisconnectResponse {
  disconnected: boolean;
}

export interface NotionSyncStatusResponse {
  status: string;
  last_sync: string | null;
  error: string | null;
}

export interface NotionSyncHistoryItem {
  status: string;
  started_at: string;
  finished_at: string | null;
  error: string | null;
}

export interface NotionSyncHistoryResponse {
  total: number;
  items: NotionSyncHistoryItem[];
}
