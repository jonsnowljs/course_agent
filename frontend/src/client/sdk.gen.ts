// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request } from './core/request';
import type { ChatChatMessageData, ChatChatMessageResponse, ChatChatHealthResponse, ConverterConvertSingleFileData, ConverterConvertSingleFileResponse, ConverterConvertMultipleFilesData, ConverterConvertMultipleFilesResponse, DocumentsUploadDocumentData, DocumentsUploadDocumentResponse, DocumentsSearchUserDocumentsData, DocumentsSearchUserDocumentsResponse, DocumentsListUserDocumentsData, DocumentsListUserDocumentsResponse, DocumentsDeleteUserDocumentData, DocumentsDeleteUserDocumentResponse, DocumentsGetUserDocumentStatsResponse, ItemsReadItemsData, ItemsReadItemsResponse, ItemsCreateItemData, ItemsCreateItemResponse, ItemsReadItemData, ItemsReadItemResponse, ItemsUpdateItemData, ItemsUpdateItemResponse, ItemsDeleteItemData, ItemsDeleteItemResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, PrivateCreateUserData, PrivateCreateUserResponse, TextMergerMergeTextFilesData, TextMergerMergeTextFilesResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse, UtilsQdrantHealthCheckResponse } from './types.gen';
import type { ApiRequestOptions } from './core/ApiRequestOptions';
import type { NotionSyncResponse, NotionIntegrationStatusResponse, NotionIntegrationDisconnectResponse } from './types.gen';

export class ChatService {
    /**
     * Chat Message
     * Send a chat message and get a streaming response with document context.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static chatMessage(data: ChatChatMessageData): CancelablePromise<ChatChatMessageResponse> {
        return request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/chat/message',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Chat Health
     * Health check for chat service.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static chatHealth(): CancelablePromise<ChatChatHealthResponse> {
        return request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/chat/health'
        });
    }
    
}

export class ConverterService {
    /**
     * Convert Single File
     * Convert a single SRT file to TXT.
     * @param data The data for the request.
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static convertSingleFile(data: ConverterConvertSingleFileData): CancelablePromise<ConverterConvertSingleFileResponse> {
        return request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/convert/srt-to-txt/single',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Convert Multiple Files
     * Convert multiple SRT files to TXT and return as ZIP.
     * @param data The data for the request.
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static convertMultipleFiles(data: ConverterConvertMultipleFilesData): CancelablePromise<ConverterConvertMultipleFilesResponse> {
        return request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/convert/srt-to-txt/batch',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class DocumentsService {
    /**
     * Upload Document
     * Upload and store a document in Qdrant.
     * Supports: PDF, DOCX, TXT files
     * @param data The data for the request.
     * @param data.formData
     * @returns DocumentUploadResponse Successful Response
     * @throws ApiError
     */
    public static uploadDocument(data: DocumentsUploadDocumentData): CancelablePromise<DocumentsUploadDocumentResponse> {
        return request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/documents/upload/',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Search User Documents
     * Search through user's documents using semantic similarity.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SearchResult Successful Response
     * @throws ApiError
     */
    public static searchUserDocuments(data: DocumentsSearchUserDocumentsData): CancelablePromise<DocumentsSearchUserDocumentsResponse> {
        return request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/documents/search/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List User Documents
     * List all documents uploaded by the current user.
     * @param data The data for the request.
     * @param data.limit Maximum number of documents to return
     * @returns UserDocument Successful Response
     * @throws ApiError
     */
    public static listUserDocuments(data: DocumentsListUserDocumentsData = {}): CancelablePromise<DocumentsListUserDocumentsResponse> {
        return request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/documents/',
            query: {
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User Document
     * Delete a specific document and all its chunks.
     * @param data The data for the request.
     * @param data.documentId
     * @returns string Successful Response
     * @throws ApiError
     */
    public static deleteUserDocument(data: DocumentsDeleteUserDocumentData): CancelablePromise<DocumentsDeleteUserDocumentResponse> {
        return request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/documents/{document_id}',
            path: {
                document_id: data.documentId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get User Document Stats
     * Get statistics about user's documents.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getUserDocumentStats(): CancelablePromise<DocumentsGetUserDocumentStatsResponse> {
        return request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/documents/stats/'
        });
    }
    
}

export class ItemsService {
    /**
     * Read Items
     * Retrieve items.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns ItemsPublic Successful Response
     * @throws ApiError
     */
    public static readItems(data: ItemsReadItemsData = {}): CancelablePromise<ItemsReadItemsResponse> {
        return request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Item
     * Create new item.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static createItem(data: ItemsCreateItemData): CancelablePromise<ItemsCreateItemResponse> {
        return request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/items/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Item
     * Get item by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static readItem(data: ItemsReadItemData): CancelablePromise<ItemsReadItemResponse> {
        return request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Item
     * Update an item.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static updateItem(data: ItemsUpdateItemData): CancelablePromise<ItemsUpdateItemResponse> {
        return request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Item
     * Delete an item.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteItem(data: ItemsDeleteItemData): CancelablePromise<ItemsDeleteItemResponse> {
        return request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: PrivateCreateUserData): CancelablePromise<PrivateCreateUserResponse> {
        return request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/private/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class TextMergerService {
    /**
     * Merge Text Files
     * Merge multiple text files into one.
     *
     * Args:
     * files: List of text files to merge
     *
     * Returns:
     * The merged content as a single string
     * @param data The data for the request.
     * @param data.formData
     * @returns string Successful Response
     * @throws ApiError
     */
    public static mergeTextFiles(data: TextMergerMergeTextFilesData): CancelablePromise<TextMergerMergeTextFilesResponse> {
        return request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/text-merger/merge/',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
    /**
     * Qdrant Health Check
     * Check if Qdrant is accessible.
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static qdrantHealthCheck(): CancelablePromise<UtilsQdrantHealthCheckResponse> {
        return request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/qdrant-health/'
        });
    }
    
}

/**
 * Sync all available Notion pages for the user and store them in the RAG vector store.
 * @param notion_token Notion integration token
 * @returns NotionSyncResponse
 */
export async function notionSync(notion_token: string, options: ApiRequestOptions = {}): Promise<NotionSyncResponse> {
  return request({
    method: 'POST',
    path: '/notion/sync',
    body: { notion_token },
    ...options,
  });
}

/**
 * Get Notion integration status
 */
export function getNotionIntegrationStatus(options: ApiRequestOptions = {}): CancelablePromise<NotionIntegrationStatusResponse> {
  return request(OpenAPI, {
    method: 'GET',
    url: '/notion/integration/status',
    ...options,
  });
}

/**
 * Disconnect Notion integration
 */
export function disconnectNotionIntegration(options: ApiRequestOptions = {}): CancelablePromise<NotionIntegrationDisconnectResponse> {
  return request(OpenAPI, {
    method: 'POST',
    url: '/notion/integration/disconnect',
    ...options,
  });
}

/**
 * Get Notion OAuth start URL (for redirect)
 */
export function getNotionOAuthStartUrl(): string {
  return '/notion/oauth/start';
}

/**
 * Start async Notion sync
 */
export function startNotionAsyncSync(options: ApiRequestOptions = {}): CancelablePromise<{ status: string }> {
  return request(OpenAPI, {
    method: 'POST',
    url: '/notion/sync/async',
    ...options,
  });
}

export interface NotionSyncStatusResponse {
  status: string;
  last_sync: string | null;
  error: string | null;
}

export function getNotionSyncStatus(options: ApiRequestOptions = {}): CancelablePromise<NotionSyncStatusResponse> {
  return request(OpenAPI, {
    method: 'GET',
    url: '/notion/sync/status',
    ...options,
  });
}

export interface NotionSyncHistoryItem {
  status: string;
  started_at: string;
  finished_at: string | null;
  error: string | null;
}

export interface NotionSyncHistoryResponse {
  total: number;
  items: NotionSyncHistoryItem[];
}

export function getNotionSyncHistory(
  params: { limit?: number; offset?: number; status?: string; start_date?: string; end_date?: string; search?: string } = {},
  options: ApiRequestOptions = {}
): CancelablePromise<NotionSyncHistoryResponse> {
  const query = new URLSearchParams();
  if (params.limit) query.append('limit', params.limit.toString());
  if (params.offset) query.append('offset', params.offset.toString());
  if (params.status) query.append('status', params.status);
  if (params.start_date) query.append('start_date', params.start_date);
  if (params.end_date) query.append('end_date', params.end_date);
  if (params.search) query.append('search', params.search);
  return request(OpenAPI, {
    method: 'GET',
    url: `/notion/sync/history${query.toString() ? '?' + query.toString() : ''}`,
    ...options,
  });
}
